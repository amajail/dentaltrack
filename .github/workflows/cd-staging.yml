name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  AZURE_WEBAPP_NAME: 'dentaltrack-api-staging'
  AZURE_WEBAPP_PACKAGE_PATH: './backend/publish'
  AZURE_STATICWEBAPP_NAME: 'dentaltrack-web-staging'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Build and publish backend
      run: |
        cd backend
        dotnet restore
        dotnet publish src/DentalTrack.Api/DentalTrack.Api.csproj -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    
    - name: Health Check
      run: |
        echo "Waiting 30 seconds for deployment to stabilize..."
        sleep 30
        
        # Retry health check up to 5 times
        for i in {1..5}; do
          echo "Health check attempt $i..."
          if curl -f -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health; then
            echo "‚úÖ Backend health check passed"
            break
          elif [ $i -eq 5 ]; then
            echo "‚ùå Backend health check failed after 5 attempts"
            exit 1
          else
            echo "‚è≥ Health check failed, retrying in 10 seconds..."
            sleep 10
          fi
        done

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install and build frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: './frontend'
        output_location: 'dist'
        skip_app_build: true

  smoke-tests:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests against staging environment..."
        
        # API health check
        echo "Testing API health endpoint..."
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || exit 1
        
        # Basic API functionality test
        echo "Testing API basic functionality..."
        response=$(curl -s -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/patients)
        if [[ $response == *"200" ]]; then
          echo "‚úÖ API responding correctly"
        else
          echo "‚ùå API not responding as expected"
          exit 1
        fi
        
        # Frontend accessibility test
        echo "Testing frontend accessibility..."
        # This would be replaced with actual frontend URL once configured
        echo "‚úÖ Frontend smoke tests would run here"
        
        echo "üéâ All smoke tests passed!"
    
    - name: Notify deployment status
      run: |
        echo "üì¢ Staging deployment completed successfully!"
        echo "üîó Backend API: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "üîó Frontend: [URL will be available once Azure Static Web Apps is configured]"

  rollback-on-failure:
    needs: [deploy-backend, deploy-frontend, smoke-tests]
    runs-on: ubuntu-latest
    if: failure()
    environment: staging
    
    steps:
    - name: Rollback deployment
      run: |
        echo "‚ùå Deployment failed, initiating rollback..."
        echo "üîÑ Rolling back to previous stable version..."
        
        # This would implement actual rollback logic
        # For now, just notification
        echo "‚ö†Ô∏è Manual rollback required - check deployment logs"
        echo "üìã Rollback checklist:"
        echo "  1. Check Azure App Service deployment slots"
        echo "  2. Restore previous Docker images if using containers"
        echo "  3. Verify database migrations if applicable"
        echo "  4. Validate health endpoints"
        
        exit 1